{"version":3,"sources":["../src/index.js"],"names":["setOption","addChangeListener","removeChangeListener","setLocalItem","getLocalItem","getAllLocalItem","removeLocalItem","removeAllLocalItem","options","cookies","Cookies","op","_","merge","callback","localStorageName","data","set","cookie","get","getAll","sentOptions","path","remove","prefix","storageName","Object","keys","forEach","key","regex","RegExp","test"],"mappings":";;;;;QAYgBA,S,GAAAA,S;QAUAC,iB,GAAAA,iB;QAUAC,oB,GAAAA,oB;QAWAC,Y,GAAAA,Y;QAaAC,Y,GAAAA,Y;QAiBAC,e,GAAAA,e;QAWAC,e,GAAAA,e;QAgBAC,kB,GAAAA,kB;;AApGhB;;;;AACA;;;;;;AAEA,IAAIC,UAAU,EAAd;AACA,IAAMC,UAAU,IAAIC,yBAAJ,EAAhB;;AAEA;;;;;;AAMO,SAASV,SAAT,GAA4B;AAAA,MAATW,EAAS,uEAAJ,EAAI;;AACjCH,YAAUI,iBAAEC,KAAF,CAAQL,OAAR,EAAiBG,EAAjB,CAAV;AACD;;AAED;;;;;;AAMO,SAASV,iBAAT,CAA2Ba,QAA3B,EAAqC;AAC1CL,UAAQR,iBAAR,CAA0Ba,QAA1B;AACD;;AAED;;;;;;AAMO,SAASZ,oBAAT,CAA8BY,QAA9B,EAAwC;AAC7CL,UAAQP,oBAAR,CAA6BY,QAA7B;AACD;;AAED;;;;;;;AAOO,SAASX,YAAT,CAAsBY,gBAAtB,EAAwCC,IAAxC,EAA8C;AACnD;AACAP,UAAQQ,GAAR,CAAYF,gBAAZ,EAA8BC,IAA9B,EAAoCR,OAApC;AACD;;AAED;;;;;;;;AAQO,SAASJ,YAAT,CAAsBW,gBAAtB,EAAiD;AAAA,MAATJ,EAAS,uEAAJ,EAAI;;AACtD;AACA,MAAMO,SAAST,QAAQU,GAAR,CAAYJ,gBAAZ,EAA8BJ,EAA9B,CAAf;AACA,MAAIO,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF;;AAED;;;;;;;AAOO,SAASb,eAAT,GAAkC;AAAA,MAATM,EAAS,uEAAJ,EAAI;;AACvC,SAAOF,QAAQW,MAAR,CAAeT,EAAf,CAAP;AACD;;AAED;;;;;;;AAOO,SAASL,eAAT,CAAyBS,gBAAzB,EAAoD;AAAA,MAATJ,EAAS,uEAAJ,EAAI;;AACzD;AACA,MAAMU,cAAcT,iBAAEC,KAAF,CAAQ;AACxBS,UAAM;AADkB,GAAR,EAGlBX,EAHkB,CAApB;AAKAF,UAAQc,MAAR,CAAeR,gBAAf,EAAiCM,WAAjC;AACD;;AAED;;;;;;AAMO,SAASd,kBAAT,CAA4BiB,MAA5B,EAAoCb,EAApC,EAAwC;AAC7C,MAAMc,cAAchB,QAAQW,MAAR,EAApB;AACAM,SAAOC,IAAP,CAAYF,WAAZ,EAAyBG,OAAzB,CAAiC,UAAUC,GAAV,EAAe;AAC9C,QAAMC,QAAQ,IAAIC,MAAJ,CAAW,MAAMP,MAAN,GAAe,IAA1B,EAAgC,GAAhC,CAAd;AACA,QAAIM,MAAME,IAAN,CAAWH,GAAX,CAAJ,EAAqB;AACnBvB,sBAAgBuB,GAAhB,EAAqBlB,EAArB;AACD;AACF,GALD;AAMD","file":"index.js","sourcesContent":["import Cookies from \"universal-cookie\"\nimport _ from \"lodash\"\n\nlet options = {}\nconst cookies = new Cookies()\n\n/**\n * Set options for the next cookies that will be stored.\n *\n * @export\n * @param {Object} [options={}]\n */\nexport function setOption(op = {}) {\n  options = _.merge(options, op)\n}\n\n/**\n *  Add a listener to when a cookie is set or removed.\n *\n * @export\n * @param {function} callback\n */\nexport function addChangeListener(callback) {\n  cookies.addChangeListener(callback)\n}\n\n/**\n * Remove a listener from the change callback.\n *\n * @export\n * @param {function} callback\n */\nexport function removeChangeListener(callback) {\n  cookies.removeChangeListener(callback)\n}\n\n/**\n * Set a cookie value.\n *\n * @export\n * @param {string} localStorageName Cookie's name\n * @param {string, Object} data Cookie's value\n */\nexport function setLocalItem(localStorageName, data) {\n  // SAVE TO COOKIE\n  cookies.set(localStorageName, data, options)\n}\n\n/**\n * Get a cookie value.\n *\n * @export\n * @param {string} localStorageName Cookie's name\n * @param {Object} [options={}] Cookie's options\n * @returns Return cookie or false if cookie is not found.\n */\nexport function getLocalItem(localStorageName, op = {}) {\n  // GET ITEM FROM LOCAL STORAGE\n  const cookie = cookies.get(localStorageName, op)\n  if (cookie) {\n    return cookie\n  } else {\n    return false\n  }\n}\n\n/**\n * Get all cookies.\n *\n * @export\n * @param {Object} [options={}]\n * @returns Return all cookies.\n */\nexport function getAllLocalItem(op = {}) {\n  return cookies.getAll(op)\n}\n\n/**\n * Remove a cookie.\n *\n * @export\n * @param {string} localStorageName Cookie's name\n * @param {Object} [options={}] Cookie's options\n */\nexport function removeLocalItem(localStorageName, op = {}) {\n  // REMOVE ITEM FROM COOKIE\n  const sentOptions = _.merge({\n      path: \"/\"\n    },\n    op\n  )\n  cookies.remove(localStorageName, sentOptions)\n}\n\n/**\n * Remove all cookies.\n *\n * @export\n * @param {string} prefix Prefix of the cookie's name to remove\n */\nexport function removeAllLocalItem(prefix, op) {\n  const storageName = cookies.getAll()\n  Object.keys(storageName).forEach(function (key) {\n    const regex = new RegExp(\"^\" + prefix + \".*\", 'i')\n    if (regex.test(key)) {\n      removeLocalItem(key, op)\n    }\n  })\n}\n"]}